import graph_tf.configurables
import graph_tf.data.single
import graph_tf.data.transforms
import graph_tf.projects.fgcn.data
import graph_tf.projects.fgcn.models

include "gtf_config/data/classification_single.gin"

data/gin.singleton.constructor = @gtf.fgcn.data.get_prefactorized_data
gtf.fgcn.data.get_prefactorized_data.data = %base_data
gtf.fgcn.data.get_prefactorized_data.adjacency_transform = %adjacency_transform
gtf.fgcn.data.get_prefactorized_data.features_transform = %features_transform
gtf.fgcn.data.get_prefactorized_data.largest_component_only = %largest_component_only

largest_component_only = False

adjacency_transform = [
    @gtf.data.transforms.add_identity,
    @gtf.data.transforms.normalize_symmetric,
]

features_transform = [
    @gtf.data.transforms.to_format,
    @gtf.data.transforms.row_normalize,
]

gtf.data.transforms.to_format.fmt = "dense"

model_fn = @gtf.fgcn.fgcn
gtf.fgcn.fgcn.l2_reg = %l2_reg
gtf.fgcn.fgcn.num_classes = %num_classes
callbacks = [@tf.keras.callbacks.EarlyStopping()]

tf.keras.callbacks.EarlyStopping.restore_best_weights = True
tf.keras.callbacks.EarlyStopping.monitor = %monitor
tf.keras.callbacks.EarlyStopping.patience = %patience

patience = 10
epochs = 200
optimizer = @tf.keras.optimizers.Adam()
tf.keras.optimizers.Adam.learning_rate = %lr

monitor = 'val_cross_entropy'
# monitor = 'val_acc'  # HACK
# tf.keras.callbacks.EarlyStopping.mode = 'max'
lr = 1e-2
l2_reg = 2.5e-4
