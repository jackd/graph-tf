import graph_tf.projects.dagnn.callbacks
import graph_tf.projects.dagnn.models
import graph_tf.utils.callbacks

include "gtf_config/data/classification_single.gin"

adjacency_transform = [
    @gtf.data.transforms.add_identity,
    @gtf.data.transforms.normalize_symmetric,
]

features_transform = [
    @gtf.data.transforms.to_format,
    @gtf.data.transforms.row_normalize,
]

gtf.data.transforms.to_format.fmt = "dense"

model_fn = @gtf.dagnn.dagnn_citations

gtf.dagnn.dagnn_citations.num_classes = %num_classes
gtf.dagnn.dagnn_citations.dropout_rate = %dropout_rate
gtf.dagnn.dagnn_citations.num_propagations = %num_propagations
gtf.dagnn.dagnn_citations.hidden_size = %hidden_size
gtf.dagnn.dagnn_citations.l2_reg = %l2_reg
gtf.dagnn.dagnn_citations.simplified = %simplified

# callbacks = [@tf.keras.callbacks.EarlyStopping()]
# tf.keras.callbacks.EarlyStopping.restore_best_weights = True
# tf.keras.callbacks.EarlyStopping.monitor = %monitor
# tf.keras.callbacks.EarlyStopping.patience = %patience

callbacks = [@gtf.utils.callbacks.EarlyStoppingV2()]
gtf.utils.callbacks.EarlyStoppingV2.restore_best_weights = True
gtf.utils.callbacks.EarlyStoppingV2.monitor = %monitor
gtf.utils.callbacks.EarlyStoppingV2.mode = %mode
gtf.utils.callbacks.EarlyStoppingV2.patience = %patience

optimizer = @tf.keras.optimizers.Adam()
tf.keras.optimizers.Adam.learning_rate = %lr


lr = 1e-2
hidden_size = 64
epochs = 1000
monitor = 'val_cross_entropy'
mode = 'min'
patience = 100
simplified = False
