import graph_tf.configurables
import graph_tf.data.single
import graph_tf.data.transforms
import graph_tf.projects.sgae
import graph_tf.utils.models

include "gtf_config/data/gae_single.gin"
data = @gtf.sgae.get_spectral_split()
gtf.sgae.get_spectral_split.data = @gtf.data.preprocess_autoencoder_data()
gtf.data.preprocess_autoencoder_data.data = %base_data
gtf.data.preprocess_autoencoder_data.validation_edges_in_adj = %validation_edges_in_adj
gtf.sgae.get_spectral_split.spectral_size = %spectral_size

adjacency_transform = [
    @gtf.data.transforms.add_identity,
    @gtf.data.transforms.normalize_symmetric,
]

features_transform = [
    @gtf.data.transforms.row_normalize,
    @gtf.data.transforms.to_format,
]

gtf.data.transforms.to_format.fmt = %fmt
fmt = "dense"

model_fn = @gtf.sgae.sgae
gtf.sgae.sgae.encoder_fn = @gtf.utils.models.mlp

gtf.utils.models.mlp.output_units = %embedding_dim
gtf.utils.models.mlp.hidden_units = %hidden_units
gtf.utils.models.mlp.dropout_rate = %dropout_rate
gtf.utils.models.mlp.input_dropout_rate = %input_dropout_rate
gtf.utils.models.mlp.dense_fn = @gtf.utils.models.dense

gtf.utils.models.dense.kernel_regularizer = @tf.keras.regularizers.L2()
tf.keras.regularizers.L2.l2 = %l2_reg

callbacks = []

epochs = 500
optimizer = @tf.keras.optimizers.Adam()
tf.keras.optimizers.Adam.learning_rate = %lr

input_dropout_rate = %dropout_rate
lr = 1e-2
l2_reg = 0
spectral_size = 64
hidden_units = (32, 32)
embedding_dim = 16
dropout_rate = 0
validation_edges_in_adj = False
